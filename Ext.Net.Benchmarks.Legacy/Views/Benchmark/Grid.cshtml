@using Ext.Net;
@using Ext.Net.MVC;

@model Ext.Net.Benchmarks.Legacy.Models.GridBenchmarkModel

<!DOCTYPE html>

<html>
<head>
    <title>Ext.NET Grid Benchmark</title>

    <style>
        .x-grid-row-over .x-grid-cell-inner {
            font-weight: bold;
        }
    </style>

    <script>
        var template = '<span style="color:{0};">{1}</span>';

        var change = function (value) {
            return Ext.String.format(template, (value > 0) ? "green" : "red", value);
        };

        var pctChange = function (value) {
            return Ext.String.format(template, (value > 0) ? "green" : "red", value + "%");
        };
    </script>
</head>
<body>
    @(Html.X().ResourceManager())

    @{
        var X = Html.X();
    }

    @for (int i = 0; i < Model.GridCount; i++)
    {
    <div>
        @(X.GridPanel()
            .ID("grid" + i)
            .Title("Array Grid #" + i)
            .Width(600)
            .Height(350)
            .Store(X.Store()
                .Model(X.Model()
                    .Fields(
                        new ModelField("company"),
                        new ModelField("price", ModelFieldType.Float),
                        new ModelField("change", ModelFieldType.Float),
                        new ModelField("pctChange", ModelFieldType.Float),
                        new ModelField("lastChange", ModelFieldType.Date, "M/d hh:mmtt")
                    )
                )
                .DataSource(Model.GridData)
            )
            .ColumnModel(
                X.Column().Text("Company").DataIndex("company").Flex(1),
                X.Column().Text("Price").DataIndex("price").Renderer(RendererFormat.UsMoney),
                X.Column().Text("Change").DataIndex("change").Renderer("change"),
                X.Column().Text("Change").DataIndex("pctChange").Renderer("pctChange"),
                X.DateColumn().Text("Last Updated").DataIndex("lastChange")
            )
            .Buttons(
                X.Button()
                .ID("button" + i)
                .Text("Click me")
                .DirectEvents(x =>
                {
                    x.Click.Action = "RenderDirectToast";
                    x.Click.ExtraParams.Add(new Parameter("count", Model.GridCount));
                    x.Click.ExtraParams.Add(new Parameter("test", Model.TestName));
                    x.Click.Method = HttpMethod.POST;
                })
            )
        )
    </div>
    }

</body>
</html>